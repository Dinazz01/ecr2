# ===============================================================================
# AWS ECR Terraform **Reusable Module**
# -------------------------------------------------------------------------------
# Features implemented (per requirements & notes):
#   ‚Ä¢ Private and/or public repositories
#   ‚Ä¢ Default encryption with **SSE‚ÄëS3** (AWS‚Äëmanaged keys) ‚Äî toggle to **SSE‚ÄëKMS**
#   ‚Ä¢ Immutable tags (optional mutability)
#   ‚Ä¢ On‚Äëpush **image scanning** + registry‚Äëwide **enhanced continuous scanning**
#   ‚Ä¢ **Lifecycle policies** (JSON input)
#   ‚Ä¢ **Pull‚Äëthrough cache** rules (Docker‚ÄØHub or 3rd‚Äëparty registries)
#   ‚Ä¢ **Cross‚Äëregion / cross‚Äëaccount replication**
#   ‚Ä¢ Repository & registry **resource policies**
#   ‚Ä¢ **Interface VPC Endpoints** (PrivateLink) for ecr.api & ecr.dkr
#   ‚Ä¢ Optional **AWS Signer** container‚Äëimage signing profile
#   ‚Ä¢ Optional creation of **CloudTrail** trail + CW Log Group for audit
#   ‚Ä¢ Tagging & naming include optional environment abbreviation (`env_abbr`)
# -------------------------------------------------------------------------------
# FILE: main.tf
# ===============================================================================
terraform {
  required_version = ">= 1.5.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = ">= 5.40"
    }
  }
}

provider "aws" {
  region = var.region
}

data "aws_region" "current" {}

# -----------------------------------------------------------------------------
# KMS (only if encryption_type == "KMS" and no key supplied)
# -----------------------------------------------------------------------------
resource "aws_kms_key" "this" {
  count               = var.encryption_type == "KMS" && var.kms_key_id == null ? 1 : 0
  description         = "CMK for ECR ‚Äì managed by module"
  enable_key_rotation = true
  tags                = merge(var.tags, {
    Name = "ecr-${var.env_abbr}-${var.name}-kms"
  })
}

locals {
  kms_key_arn_effective = coalesce(var.kms_key_id, try(aws_kms_key.this[0].arn, null))
  repo_name             = "${var.env_abbr != "" ? "${var.env_abbr}-" : ""}${var.name}"
}

# -----------------------------------------------------------------------------
# PRIVATE REPOSITORY
# -----------------------------------------------------------------------------
resource "aws_ecr_repository" "this" {
  name                 = local.repo_name
  image_tag_mutability = var.image_tag_mutability
  scan_on_push         = var.enable_scanning_on_push

  encryption_configuration {
    encryption_type = var.encryption_type
    kms_key         = var.encryption_type == "KMS" ? local.kms_key_arn_effective : null
  }

  tags = merge(var.tags, { Name = local.repo_name })
}

# -----------------------------------------------------------------------------
# PUBLIC REPOSITORY (optional)
# -----------------------------------------------------------------------------
resource "aws_ecrpublic_repository" "public" {
  count           = var.create_public_repo ? 1 : 0
  repository_name = local.repo_name
  catalog_data {
    about_text = "Public repository for ${local.repo_name}"
  }
  tags = var.tags
}

# -----------------------------------------------------------------------------
# LIFECYCLE POLICY
# -----------------------------------------------------------------------------
resource "aws_ecr_lifecycle_policy" "this" {
  count      = var.lifecycle_policy != "" && var.create_lifecycle_policy ? 1 : 0
  repository = aws_ecr_repository.this.name
  policy     = var.lifecycle_policy
}

# -----------------------------------------------------------------------------
# PULL‚ÄëTHROUGH CACHE RULES
# -----------------------------------------------------------------------------
resource "aws_ecr_pull_through_cache_rule" "this" {
  for_each = { for idx, rule in var.pull_through_cache_rules : idx => rule }
  ecr_repository_prefix = each.value.ecr_repository_prefix
  upstream_registry_url = each.value.upstream_registry_url
}

# -----------------------------------------------------------------------------
# REPLICATION CONFIGURATION
# -----------------------------------------------------------------------------
resource "aws_ecr_replication_configuration" "this" {
  count = length(var.replication_regions) > 0 ? 1 : 0
  replication_configuration {
    rules {
      destinations = [for r in var.replication_regions : { region = r }]
    }
  }
}

# -----------------------------------------------------------------------------
# REGISTRY‚ÄëWIDE SCANNING
# -----------------------------------------------------------------------------
resource "aws_ecr_registry_scanning_configuration" "this" {
  scan_type = var.scan_type  # BASIC or ENHANCED

  rules {
    scan_frequency    = var.scan_frequency   # CONTINUOUS or DAILY
    repository_filter {
      filter      = "*"
      filter_type = "WILDCARD"
    }
  }
}

# -----------------------------------------------------------------------------
# REPOSITORY & REGISTRY POLICIES
# -----------------------------------------------------------------------------
resource "aws_ecr_repository_policy" "repo_policy" {
  count      = length(var.allowed_principals) > 0 ? 1 : 0
  repository = aws_ecr_repository.this.name
  policy     = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Sid       = "RepoAccess",
      Effect    = "Allow",
      Principal = { AWS = var.allowed_principals },
      Action    = [
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "ecr:BatchCheckLayerAvailability",
        "ecr:PutImage",
        "ecr:InitiateLayerUpload",
        "ecr:UploadLayerPart",
        "ecr:CompleteLayerUpload"
      ]
    }]
  })
}

resource "aws_ecr_registry_policy" "registry_policy" {
  count  = var.registry_policy != "" ? 1 : 0
  policy = var.registry_policy
}

# -----------------------------------------------------------------------------
# INTERFACE VPC ENDPOINTS (PrivateLink)
# -----------------------------------------------------------------------------
resource "aws_vpc_endpoint" "ecr_api" {
  count               = var.create_vpc_endpoints ? 1 : 0
  vpc_id              = var.vpc_id
  service_name        = "com.amazonaws.${data.aws_region.current.name}.ecr.api"
  vpc_endpoint_type   = "Interface"
  subnet_ids          = var.subnet_ids
  security_group_ids  = var.security_group_ids
  private_dns_enabled = true
  tags                = merge(var.tags, { Name = "ecr-api-${var.env_abbr}" })
}

resource "aws_vpc_endpoint" "ecr_dkr" {
  count               = var.create_vpc_endpoints ? 1 : 0
  vpc_id              = var.vpc_id
  service_name        = "com.amazonaws.${data.aws_region.current.name}.ecr.dkr"
  vpc_endpoint_type   = "Interface"
  subnet_ids          = var.subnet_ids
  security_group_ids  = var.security_group_ids
  private_dns_enabled = true
  tags                = merge(var.tags, { Name = "ecr-dkr-${var.env_abbr}" })
}

# -----------------------------------------------------------------------------
# üõ°Ô∏è  OPTIONAL ‚Äë AWS SIGNER (image signing)
# -----------------------------------------------------------------------------
resource "aws_signer_signing_profile" "container" {
  count = var.enable_signing_profile ? 1 : 0
  name  = "ecr-container-signing-${var.env_abbr}-${var.name}"
  platform_id = "AWSLambda-SHA384-ECDSA" # common for container images
  tags = var.tags
}

# -----------------------------------------------------------------------------
# üìù  OPTIONAL ‚Äë CLOUDTRAIL + CLOUDWATCH LOG GROUP
# -----------------------------------------------------------------------------
resource "aws_cloudwatch_log_group" "trail" {
  count = var.create_cloudtrail ? 1 : 0
  name  = "/aws/cloudtrail/${var.env_abbr}-ecr-trail"
  retention_in_days = var.cloudtrail_log_retention
  tags = var.tags
}

resource "aws_cloudtrail" "this" {
  count                          = var.create_cloudtrail ? 1 : 0
  name                           = "${var.env_abbr}-ecr-trail"
  s3_bucket_name                 = var.cloudtrail_s3_bucket_name
  include_global_service_events  = true
  is_multi_region_trail          = true
  cloud_watch_logs_group_arn     = aws_cloudwatch_log_group.trail[0].arn
  cloud_watch_logs_role_arn      = var.cloudtrail_logs_role_arn
  tags                           = var.tags
}

# -----------------------------------------------------------------------------
# OUTPUTS
# -----------------------------------------------------------------------------
output "repository_url" {
  description = "Private ECR repository URI"
  value       = aws_ecr_repository.this.repository_url
}

output "repository_arn" {
  description = "Private ECR repository ARN"
  value       = aws_ecr_repository.this.arn
}

output "public_repository_uri" {
  description = "URI of the public ECR repository (if created)"
  value       = try(aws_ecrpublic_repository.public[0].repository_uri, null)
}

output "kms_key_arn" {
  value       = local.kms_key_arn_effective
  description = "ARN of the CMK used for encryption (if applicable)"
}

output "signing_profile_arn" {
  value       = try(aws_signer_signing_profile.container[0].arn, null)
  description = "AWS Signer profile ARN (if created)"
}

output "vpc_endpoint_ids" {
  value = concat(
    try([aws_vpc_endpoint.ecr_api[0].id], []),
    try([aws_vpc_endpoint.ecr_dkr[0].id], [])
  )
  description = "IDs of Interface Endpoints (if created)"
}

# ===============================================================================
# FILE: variables.tf (all variables with descriptions & sensible defaults)
# ===============================================================================
variable "region" {
  description = "AWS region for provider override"
  type        = string
  default     = null
}

variable "name" {
  description = "Base name for the ECR repository"
  type        = string
}

variable "env_abbr" {
  description = "Optional environment abbreviation prefix (e.g., dev, uat, prod)"
  type        = string
  default     = ""
}

variable "create_public_repo" {
  description = "Whether to create a public repository as well"
  type        = bool
  default     = false
}

variable "image_tag_mutability" {
  description = "IMMUTABLE or MUTABLE tags"
  type        = string
  default     = "IMMUTABLE"
  validation {
    condition     = contains(["IMMUTABLE", "MUTABLE"], var.image_tag_mutability)
    error_message = "Valid values are IMMUTABLE or MUTABLE."
  }
}

variable "encryption_type" {
  description = "AES256 (SSE-S3) or KMS (SSE-KMS)"
  type        = string
  default     = "AES256"
  validation {
    condition     = contains(["AES256", "KMS"], var.encryption_type)
    error_message = "Valid values are AES256 or KMS."
  }
}

variable "kms_key_id" {
  description = "Existing KMS key ARN for SSE-KMS (optional)"
  type        = string
  default     = null
}

variable "enable_scanning_on_push" {
  description = "Enable image scanning on push"
  type        = bool
  default     = true
}

variable "scan_type" {
  description = "Registry scan type: BASIC or ENHANCED"
  type        = string
  default     = "ENHANCED"
  validation {
    condition     = contains(["BASIC", "ENHANCED"], var.scan_type)
    error_message = "Valid values: BASIC, ENHANCED."
  }
}

variable "scan_frequency" {
  description = "Registry scan frequency when scan_type = ENHANCED. CONTINUOUS or DAILY"
  type        = string
  default     = "CONTINUOUS"
  validation {
    condition     = contains(["CONTINUOUS", "DAILY"], var.scan_frequency)
    error_message = "Valid values: CONTINUOUS, DAILY."
  }
}

variable "create_lifecycle_policy" {
  description = "Attach lifecycle_policy JSON"
  type        = bool
  default     = false
}

variable "lifecycle_policy" {
  description = "Lifecycle policy JSON string"
  type        = string
  default     = ""
}

variable "replication_regions" {
  description = "List of regions to replicate to"
  type        = list(string)
  default     = []
}

variable "pull_through_cache_rules" {
  description = "List of objects { ecr_repository_prefix, upstream_registry
===========================================================================================
variable "ecr_repo_configs" {
  description = "Map of ECR repo configs per environment"
  type = map(object({
    repository_name         = string
    region                  = string
    image_tag_mutability    = string
    scan_on_push            = bool
    encryption_enabled      = bool
    kms_key_arn             = string
    lifecycle_policy        = string
    repository_policy       = string
    tags                    = map(string)
    force_delete            = bool
    pull_through_cache_rules = list(object({
      ecr_repository_prefix = string
      upstream_registry_url = string
    }))
  }))
}
==============================================================================
module "ecr_factory" {
  source = "./modules/aws-ecr/ecr-factory"

  ecr_repo_configs = {
    "repo-dev" = {
      repository_name         = "my-app-dev"
      region                  = "us-east-1"
      image_tag_mutability    = "IMMUTABLE"
      scan_on_push            = true
      encryption_enabled      = false
      kms_key_arn             = null
      lifecycle_policy        = file("./policies/dev-lifecycle.json")
      repository_policy       = file("./policies/dev-repo-policy.json")
      tags                    = { Environment = "dev" }
      force_delete            = true
      pull_through_cache_rules = []
    }
  }
}


